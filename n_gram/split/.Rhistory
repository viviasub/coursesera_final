shiny::runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
#############
fit_am<-lm(mpg~wt*am,data = cars_clean)
plot(x=cars$wt,y=cars$mpg,xlim=c(0,6),ylim=c(0,50),col=cars$am)
legend(x = 1,y=10,legend = levels(cars$am),pch = 21,col = c(1,2))
summary(fit_am)
library(datasets)
library(car)
data(mtcars)
require(GGally)
require(ggplot2)
cars<-mtcars
for (i in c(2,8,9,10,11)) {
cars[,i]<-as.factor(cars[,i])
}
cars$am<-factor(cars$am,labels = c("auto","manual"))
cars$vs<-factor(cars$vs,labels = c("V-shape","linear"))
## plot mpg vs. am
boxplot(cars$mpg~cars$am,main="mpg auto vs. manual")
points(cars$am,cars$mpg)
## t-test mpg-auto vs mpg-manual
t.test(cars$mpg~cars$am)
## Negative numeri correlation
## To develop the model we choose to include the negative correlation that
## are reducing the mpg the positive correlation
g4=ggpairs(cars,columns=c(1,3,4,6,9), lower = list(continuous = "smooth"),mapping = ggplot2::aes(colour=am))
g4
## starting Model: Y=Bo + B1*wt + B2*hp + B3*disp
## no interaction
fit_1<-lm(mpg ~ disp+hp+wt, data = cars)
summary(fit_1)
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
vif(fit_1)
library(datasets)
library(car)
data(mtcars)
require(GGally)
require(ggplot2)
cars<-mtcars
for (i in c(2,8,9,10,11)) {
cars[,i]<-as.factor(cars[,i])
}
cars$am<-factor(cars$am,labels = c("auto","manual"))
cars$vs<-factor(cars$vs,labels = c("V-shape","linear"))
## plot mpg vs. am
boxplot(cars$mpg~cars$am,main="mpg auto vs. manual")
points(cars$am,cars$mpg)
## t-test mpg-auto vs mpg-manual
t.test(cars$mpg~cars$am)
## Negative numeri correlation
## To develop the model we choose to include the negative correlation that
## are reducing the mpg the positive correlation
g4=ggpairs(cars,columns=c(1,3,4,6,9), lower = list(continuous = "smooth"),mapping = ggplot2::aes(colour=am))
g4
## starting Model: Y=Bo + B1*wt + B2*hp + B3*disp
## no interaction
fit_1<-lm(mpg ~ disp+hp+wt, data = cars)
summary(fit_1)
vif(fit_1)
fit_2<-lm(mpg ~ hp+wt, data = cars)
summary(fit_2)
vif(fit_2)
anova(fit_1, fit_2)
AIC(fit_1, fit_2)
fit_3<-lm(mpg ~hp + wt + cyl, data = cars)
summary(fit_3)
vif(fit_3)
anova(fit_2, fit_3)
AIC(fit_2, fit_3)
fit_4<-lm(mpg ~hp+wt*am, data = cars) #hp + wt +wt:am
summary(fit_4)
vif(fit_4)
anova(fit_2, fit_4)
AIC(fit_2,fit_4)
par(mfrow = c(2, 2))
plot(fit_4)
par(mfrow = c(1, 1))
plot(fit_4,which=5)
cars_clean<-cars[!row.names(cars)=="Maserati Bora",]
fit_final<-lm(mpg ~hp+wt*am, data = cars_clean) #hp + wt +wt:am
summary(fit_final)
rbind(vif(fit_4),vif(fit_final))
rbind(AIC(fit_4),AIC(fit_final))
par(mfrow = c(2, 2))
plot(fit_final)
par(mfrow = c(1, 1))
plot(fit_final,which=5)
plot(fit_final,which=2)
#############
fit_am<-lm(mpg~wt*am,data = cars_clean)
plot(x=cars$wt,y=cars$mpg,xlim=c(0,6),ylim=c(0,50),col=cars$am)
legend(x = 1,y=10,legend = levels(cars$am),pch = 21,col = c(1,2))
summary(fit_am)
intercept_manual<-fit_am$coefficients[1]+fit_am$coefficients[3]
slope_manual<-fit_am$coefficients[2]+fit_am$coefficients[4]
abline(intercept_manual,slope_manual, lwd = 2,col="red")
intercept_auto<-fit_am$coefficients[1]
slope_auto<-fit_am$coefficients[2]
abline(intercept_auto,slope_auto, lwd = 2)
par(mfrow=c(2,1))
plot(fit_final,which=2)
plot(fit_am,which=2)
library(rgl)
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
install.packages("DT")
mpg
cars
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/courses-master/09_Developing_Data_Products-master/Shiny_Part_2/app2')
runApp('script_vecchi_coursera/courses-master/09_Developing_Data_Products-master/Shiny_Part_2/app2')
runApp('script_vecchi_coursera/shiny_project/vivi')
?predict
predict(fit_am,3)
predict(fit_am,cars$wt==3)
predict(fit_am,newdata = data.frame(wt=3))
fit_am
model1 <- lm(hp ~ mpg, data = mtcars)
model1
predict(model1, newdata = data.frame(mpg = 20))
predict(model1, newdata = data.frame(wt = 3))
model1 <- lm(mpg ~ wt, data = mtcars)
predict(model1, newdata = data.frame(wt = 3))
model1 <- lm(mpg ~ wt*am, data = mtcars)
predict(model1, newdata = data.frame(wt = 3))
predict(model1, newdata = data.frame(wt = 3,am="auto")
)
predict(model1, newdata = data.frame(wt = 3,am=0))
predict(model1, newdata = data.frame(wt = 3,am=1))
predict(model1, newdata = data.frame(wt = 1,am=1))
predict(model1, newdata = data.frame(wt = 1,am=0))
predict(model1, newdata = data.frame(wt = 1,am=0))
model.extract()
model1
predict(model1, newdata = data.frame(wt = 3,am=0))
predict(model1, newdata = data.frame(wt = 3,am=1))
model1 <- lm(mpg ~ hp+wt*am, data = mtcars)
model1
predict(model1, newdata = data.frame(hp,100,wt = 3,am=1))
predict(model1, newdata = data.frame(hp=100,wt = 3,am=1))
predict(model1, newdata = data.frame(hp=500,wt = 3,am=1))
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
model1
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/courses-master/09_Developing_Data_Products-master/Shiny_Part_2/app2')
runApp('script_vecchi_coursera/courses-master/09_Developing_Data_Products-master/Shiny_Part_2/app2')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
?pairwise.t.test
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
cars<-mtcars
for (i in c(2,8,9,10,11)) {
cars[,i]<-as.factor(cars[,i])
}
cars$am<-factor(cars$am,labels = c("auto","manual"))
cars$vs<-factor(cars$vs,labels = c("V-shape","linear"))
summary(cars)
cars<-mtcars
for (i in c(2,8,9,10,11)) {
cars[,i]<-as.factor(cars[,i])
}
cars$am<-factor(cars$am,labels = c("auto","manual"))
cars$vs<-factor(cars$vs,labels = c("V-shape","linear"))
summary(cars)
cars<-mtcars
for (i in c(2,8,9,10,11)) {
cars[,i]<-as.factor(cars[,i])
}
cars$am<-factor(cars$am,labels = c("auto","manual"))
cars$vs<-factor(cars$vs,labels = c("V-shape","linear"))
summary(cars)
summary(cars[,2])
summary(cars[,c(1,3,4,5,6])
summary(cars[,c(1,3,4,5,6)])
require(GGally)
require(ggplot2)
g4=ggpairs(cars,columns=c(1,3,4,6,9), lower = list(continuous = "smooth"),mapping = ggplot2::aes(colour=am))
g4
fit_am<-lm(mpg~wt*am,data = cars)
plot(x=cars$wt,y=cars$mpg,xlim=c(0,6),ylim=c(0,50),col=cars$am)
legend(x = 1,y=10,legend = levels(cars$am),pch = 21,col = c(1,2))
summary(fit_am)
intercept_manual<-fit_am$coefficients[1]+fit_am$coefficients[3]
slope_manual<-fit_am$coefficients[2]+fit_am$coefficients[4]
abline(intercept_manual,slope_manual, lwd = 2,col="red")
intercept_auto<-fit_am$coefficients[1]
slope_auto<-fit_am$coefficients[2]
abline(intercept_auto,slope_auto, lwd = 2)
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi_shiny_app')
runApp('script_vecchi_coursera/shiny_project/vivi_shiny_app')
# Use 4GB of RAM memory for RWeka package.
options(java.parameters = "-Xmx4g" )
rm(list = ls())
try(dev.off())
dev.set(2)
plot.new()
shell("cls")
gc()
#library("stringr")
#library("stringi")
library("tm")
#library("SnowballC")
library("wordcloud")
library("RWeka")
library("RWeka")
rm(list = ls())
closeAllConnections()
try(dev.off())
dev.set(2)
plot.new()
shell("cls")
gc()
library("tm")
dir<-"Progetti_R/casa"
## SET working dir
work_dir<-paste("~/",dir,"/final",sep="")
setwd(work_dir)
setwd("./ngram/split")
#dir<-"Progetti_R/casa"
dir<-"script_vecchi_coursera"
## SET working dir
work_dir<-paste("~/",dir,"/final",sep="")
setwd(work_dir)
setwd("./ngram/split")
setwd("./n_gram/split")
#bigram <- readRDS("Bigram_DF.RData")
#trigram <- readRDS(file="Trigram_DF.RData")
#fourgram <- readRDS(file="Quadrigram_DF.RData")
load("Bigram_DF.RData")
rm(list = ls())
closeAllConnections()
try(dev.off())
dev.set(2)
plot.new()
shell("cls")
gc()
library("tm")
#dir<-"Progetti_R/casa"
dir<-"script_vecchi_coursera"
## SET working dir
work_dir<-paste("~/",dir,"/final",sep="")
setwd(work_dir)
setwd("./n_gram/split")
#bigram <- readRDS("Bigram.RData")
#trigram <- readRDS(file="Trigram.RData")
#fourgram <- readRDS(file="Quadrigram.RData")
load("Bigram_nostop.RData")
load("Trigram_nostop.RData")
load("Quadrigram_nostop.RData")
load("Bigram.RData")
load("Trigram.RData")
load("Quadrigram.RData")
inputTxt<-"time to get"
if(nchar(inputTxt) > 0) {
#clean input
inputTxt <- tolower(inputTxt)
inputTxt <- removeNumbers(inputTxt)
inputTxt <- removePunctuation(inputTxt)
inputTxt <- stripWhitespace(inputTxt)
#split into words
inputList <- unlist(strsplit(inputTxt, " "))
print(inputList)
numWords <- length(inputList)
print(numWords)
runBigram <- function(words){
Bigram[Bigram$ngrams$one == words,]$ngrams$two
}
runBigram2 <- function(words){
Bigram_nostop[Bigram_nostop$ngrams$one == words,]$ngrams$two
}
runTrigram <- function(words){
Trigram[Trigram$ngrams$one == words[1] &
Trigram$ngrams$two == words[2],]$ngrams$three
}
runTrigram2 <- function(words){
Trigram_nostop[Trigram_nostop$ngrams$one == words[1] &
Trigram_nostop$ngrams$two == words[2],]$ngrams$three
}
runFourgram <- function(words) {
Quadrigram[Quadrigram$ngrams$one == words[1] &
Quadrigram$ngrams$two == words[2] &
Quadrigram$ngrams$three == words[3],]$ngrams$four
}
runFourgram2 <- function(words) {
Quadrigram_nostop[Quadrigram_nostop$ngrams$one == words[1] &
Quadrigram_nostop$ngrams$two == words[2] &
Quadrigram_nostop$ngrams$three == words[3],]$ngrams$four
}
if(numWords == 1) {
#print("running bigram")
predList <- runBigram(inputList[1])
predList2 <- runBigram2(inputList[1])
}else if (numWords == 2) {
#print("running trigram")
word1 <- inputList[1]
word2 <- inputList[2]
predList <- runTrigram(c(word1, word2))
predList2 <- runTrigram2(c(word1, word2))
if(length(predList) == 0){
#print("Trigram failed running bigram")
predList <- runBigram(word2)
predList2 <- runBigram2(inputList[1])
}
}else {
#print("running fourgram")
word1 <- inputList[numWords-2]
word2 <- inputList[numWords-1]
word3 <- inputList[numWords]
predList <- runFourgram(c(word1, word2,word3))
predList2 <- runFourgram2(c(word1, word2,word3))
if(length(predList) == 0){
#print("fourgram failed running trigram")
predList <- runTrigram(c(word2,word3))
predList2 <- runTrigram2(c(word2,word3))
}
if(length(predList) == 0){
#print("trigram failed running bigram")
predList <- runBigram(word3)
predList2 <- runBigram2(word3)
}
}
#Return top n predictors
n <- 4
tp <- length(predList)
tp2 <- length(predList2)
if( tp >= n){
predList <- predList[1:n]
}
if( tp2 >= n){
(predList2 <- predList2[1:n])
}
print(as.character(predList))
print(as.character(predList2))
}else{
""
}
inputTxt<-"time"
if(nchar(inputTxt) > 0) {
#clean input
inputTxt <- tolower(inputTxt)
inputTxt <- removeNumbers(inputTxt)
inputTxt <- removePunctuation(inputTxt)
inputTxt <- stripWhitespace(inputTxt)
#split into words
inputList <- unlist(strsplit(inputTxt, " "))
print(inputList)
numWords <- length(inputList)
print(numWords)
runBigram <- function(words){
Bigram[Bigram$ngrams$one == words,]$ngrams$two
}
runBigram2 <- function(words){
Bigram_nostop[Bigram_nostop$ngrams$one == words,]$ngrams$two
}
runTrigram <- function(words){
Trigram[Trigram$ngrams$one == words[1] &
Trigram$ngrams$two == words[2],]$ngrams$three
}
runTrigram2 <- function(words){
Trigram_nostop[Trigram_nostop$ngrams$one == words[1] &
Trigram_nostop$ngrams$two == words[2],]$ngrams$three
}
runFourgram <- function(words) {
Quadrigram[Quadrigram$ngrams$one == words[1] &
Quadrigram$ngrams$two == words[2] &
Quadrigram$ngrams$three == words[3],]$ngrams$four
}
runFourgram2 <- function(words) {
Quadrigram_nostop[Quadrigram_nostop$ngrams$one == words[1] &
Quadrigram_nostop$ngrams$two == words[2] &
Quadrigram_nostop$ngrams$three == words[3],]$ngrams$four
}
if(numWords == 1) {
#print("running bigram")
predList <- runBigram(inputList[1])
predList2 <- runBigram2(inputList[1])
}else if (numWords == 2) {
#print("running trigram")
word1 <- inputList[1]
word2 <- inputList[2]
predList <- runTrigram(c(word1, word2))
predList2 <- runTrigram2(c(word1, word2))
if(length(predList) == 0){
#print("Trigram failed running bigram")
predList <- runBigram(word2)
predList2 <- runBigram2(inputList[1])
}
}else {
#print("running fourgram")
word1 <- inputList[numWords-2]
word2 <- inputList[numWords-1]
word3 <- inputList[numWords]
predList <- runFourgram(c(word1, word2,word3))
predList2 <- runFourgram2(c(word1, word2,word3))
if(length(predList) == 0){
#print("fourgram failed running trigram")
predList <- runTrigram(c(word2,word3))
predList2 <- runTrigram2(c(word2,word3))
}
if(length(predList) == 0){
#print("trigram failed running bigram")
predList <- runBigram(word3)
predList2 <- runBigram2(word3)
}
}
#Return top n predictors
n <- 4
tp <- length(predList)
tp2 <- length(predList2)
if( tp >= n){
predList <- predList[1:n]
}
if( tp2 >= n){
(predList2 <- predList2[1:n])
}
print(as.character(predList))
print(as.character(predList2))
}else{
""
}
shiny::runApp('~/script_vecchi_coursera/final/shiny_app')
runApp('~/script_vecchi_coursera/final/shiny_app')
runApp('~/script_vecchi_coursera/final/shiny_app')
runApp('~/script_vecchi_coursera/final/shiny_app')
runApp('~/script_vecchi_coursera/final/shiny_app')
runApp('~/script_vecchi_coursera/final/shiny_app')
runApp('~/script_vecchi_coursera/final/shiny_app')
as.character(predList2)
as.character(predList)
runApp('~/script_vecchi_coursera/final/shiny_app')
runApp('~/script_vecchi_coursera/final/shiny_app')
runApp('~/script_vecchi_coursera/final/shiny_app')
