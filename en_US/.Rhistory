shiny::runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
#############
fit_am<-lm(mpg~wt*am,data = cars_clean)
plot(x=cars$wt,y=cars$mpg,xlim=c(0,6),ylim=c(0,50),col=cars$am)
legend(x = 1,y=10,legend = levels(cars$am),pch = 21,col = c(1,2))
summary(fit_am)
library(datasets)
library(car)
data(mtcars)
require(GGally)
require(ggplot2)
cars<-mtcars
for (i in c(2,8,9,10,11)) {
cars[,i]<-as.factor(cars[,i])
}
cars$am<-factor(cars$am,labels = c("auto","manual"))
cars$vs<-factor(cars$vs,labels = c("V-shape","linear"))
## plot mpg vs. am
boxplot(cars$mpg~cars$am,main="mpg auto vs. manual")
points(cars$am,cars$mpg)
## t-test mpg-auto vs mpg-manual
t.test(cars$mpg~cars$am)
## Negative numeri correlation
## To develop the model we choose to include the negative correlation that
## are reducing the mpg the positive correlation
g4=ggpairs(cars,columns=c(1,3,4,6,9), lower = list(continuous = "smooth"),mapping = ggplot2::aes(colour=am))
g4
## starting Model: Y=Bo + B1*wt + B2*hp + B3*disp
## no interaction
fit_1<-lm(mpg ~ disp+hp+wt, data = cars)
summary(fit_1)
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
vif(fit_1)
library(datasets)
library(car)
data(mtcars)
require(GGally)
require(ggplot2)
cars<-mtcars
for (i in c(2,8,9,10,11)) {
cars[,i]<-as.factor(cars[,i])
}
cars$am<-factor(cars$am,labels = c("auto","manual"))
cars$vs<-factor(cars$vs,labels = c("V-shape","linear"))
## plot mpg vs. am
boxplot(cars$mpg~cars$am,main="mpg auto vs. manual")
points(cars$am,cars$mpg)
## t-test mpg-auto vs mpg-manual
t.test(cars$mpg~cars$am)
## Negative numeri correlation
## To develop the model we choose to include the negative correlation that
## are reducing the mpg the positive correlation
g4=ggpairs(cars,columns=c(1,3,4,6,9), lower = list(continuous = "smooth"),mapping = ggplot2::aes(colour=am))
g4
## starting Model: Y=Bo + B1*wt + B2*hp + B3*disp
## no interaction
fit_1<-lm(mpg ~ disp+hp+wt, data = cars)
summary(fit_1)
vif(fit_1)
fit_2<-lm(mpg ~ hp+wt, data = cars)
summary(fit_2)
vif(fit_2)
anova(fit_1, fit_2)
AIC(fit_1, fit_2)
fit_3<-lm(mpg ~hp + wt + cyl, data = cars)
summary(fit_3)
vif(fit_3)
anova(fit_2, fit_3)
AIC(fit_2, fit_3)
fit_4<-lm(mpg ~hp+wt*am, data = cars) #hp + wt +wt:am
summary(fit_4)
vif(fit_4)
anova(fit_2, fit_4)
AIC(fit_2,fit_4)
par(mfrow = c(2, 2))
plot(fit_4)
par(mfrow = c(1, 1))
plot(fit_4,which=5)
cars_clean<-cars[!row.names(cars)=="Maserati Bora",]
fit_final<-lm(mpg ~hp+wt*am, data = cars_clean) #hp + wt +wt:am
summary(fit_final)
rbind(vif(fit_4),vif(fit_final))
rbind(AIC(fit_4),AIC(fit_final))
par(mfrow = c(2, 2))
plot(fit_final)
par(mfrow = c(1, 1))
plot(fit_final,which=5)
plot(fit_final,which=2)
#############
fit_am<-lm(mpg~wt*am,data = cars_clean)
plot(x=cars$wt,y=cars$mpg,xlim=c(0,6),ylim=c(0,50),col=cars$am)
legend(x = 1,y=10,legend = levels(cars$am),pch = 21,col = c(1,2))
summary(fit_am)
intercept_manual<-fit_am$coefficients[1]+fit_am$coefficients[3]
slope_manual<-fit_am$coefficients[2]+fit_am$coefficients[4]
abline(intercept_manual,slope_manual, lwd = 2,col="red")
intercept_auto<-fit_am$coefficients[1]
slope_auto<-fit_am$coefficients[2]
abline(intercept_auto,slope_auto, lwd = 2)
par(mfrow=c(2,1))
plot(fit_final,which=2)
plot(fit_am,which=2)
library(rgl)
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
install.packages("DT")
mpg
cars
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/courses-master/09_Developing_Data_Products-master/Shiny_Part_2/app2')
runApp('script_vecchi_coursera/courses-master/09_Developing_Data_Products-master/Shiny_Part_2/app2')
runApp('script_vecchi_coursera/shiny_project/vivi')
?predict
predict(fit_am,3)
predict(fit_am,cars$wt==3)
predict(fit_am,newdata = data.frame(wt=3))
fit_am
model1 <- lm(hp ~ mpg, data = mtcars)
model1
predict(model1, newdata = data.frame(mpg = 20))
predict(model1, newdata = data.frame(wt = 3))
model1 <- lm(mpg ~ wt, data = mtcars)
predict(model1, newdata = data.frame(wt = 3))
model1 <- lm(mpg ~ wt*am, data = mtcars)
predict(model1, newdata = data.frame(wt = 3))
predict(model1, newdata = data.frame(wt = 3,am="auto")
)
predict(model1, newdata = data.frame(wt = 3,am=0))
predict(model1, newdata = data.frame(wt = 3,am=1))
predict(model1, newdata = data.frame(wt = 1,am=1))
predict(model1, newdata = data.frame(wt = 1,am=0))
predict(model1, newdata = data.frame(wt = 1,am=0))
model.extract()
model1
predict(model1, newdata = data.frame(wt = 3,am=0))
predict(model1, newdata = data.frame(wt = 3,am=1))
model1 <- lm(mpg ~ hp+wt*am, data = mtcars)
model1
predict(model1, newdata = data.frame(hp,100,wt = 3,am=1))
predict(model1, newdata = data.frame(hp=100,wt = 3,am=1))
predict(model1, newdata = data.frame(hp=500,wt = 3,am=1))
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
model1
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/courses-master/09_Developing_Data_Products-master/Shiny_Part_2/app2')
runApp('script_vecchi_coursera/courses-master/09_Developing_Data_Products-master/Shiny_Part_2/app2')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
?pairwise.t.test
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
cars<-mtcars
for (i in c(2,8,9,10,11)) {
cars[,i]<-as.factor(cars[,i])
}
cars$am<-factor(cars$am,labels = c("auto","manual"))
cars$vs<-factor(cars$vs,labels = c("V-shape","linear"))
summary(cars)
cars<-mtcars
for (i in c(2,8,9,10,11)) {
cars[,i]<-as.factor(cars[,i])
}
cars$am<-factor(cars$am,labels = c("auto","manual"))
cars$vs<-factor(cars$vs,labels = c("V-shape","linear"))
summary(cars)
cars<-mtcars
for (i in c(2,8,9,10,11)) {
cars[,i]<-as.factor(cars[,i])
}
cars$am<-factor(cars$am,labels = c("auto","manual"))
cars$vs<-factor(cars$vs,labels = c("V-shape","linear"))
summary(cars)
summary(cars[,2])
summary(cars[,c(1,3,4,5,6])
summary(cars[,c(1,3,4,5,6)])
require(GGally)
require(ggplot2)
g4=ggpairs(cars,columns=c(1,3,4,6,9), lower = list(continuous = "smooth"),mapping = ggplot2::aes(colour=am))
g4
fit_am<-lm(mpg~wt*am,data = cars)
plot(x=cars$wt,y=cars$mpg,xlim=c(0,6),ylim=c(0,50),col=cars$am)
legend(x = 1,y=10,legend = levels(cars$am),pch = 21,col = c(1,2))
summary(fit_am)
intercept_manual<-fit_am$coefficients[1]+fit_am$coefficients[3]
slope_manual<-fit_am$coefficients[2]+fit_am$coefficients[4]
abline(intercept_manual,slope_manual, lwd = 2,col="red")
intercept_auto<-fit_am$coefficients[1]
slope_auto<-fit_am$coefficients[2]
abline(intercept_auto,slope_auto, lwd = 2)
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi')
runApp('script_vecchi_coursera/shiny_project/vivi_shiny_app')
runApp('script_vecchi_coursera/shiny_project/vivi_shiny_app')
dirname(sys.frame(1)$ofile)
options(java.parameters = "-Xmx4g" )
rm(list = ls())
try(dev.off())
dev.set(2)
plot.new()
shell("cls")
#library("stringr")
#library("stringi")
library("tm")
#library("SnowballC")
library("wordcloud")
#dir<-"Progetti_R/casa"
dir<-"script_vecchi_coursera"
## SET working dir
work_dir<-paste("~/",dir,"/final",sep="")
if(!file.exists(work_dir)){dir.create(work_dir)}
setwd(work_dir)
if(!file.exists("en_US")){dir.create("en_US")}
setwd("./en_US")
con <- file("en_US.twitter.txt","r")
twitter<-readLines(con,encoding="UTF-8",skipNul=TRUE)
## Read the next line of text readLines(con, 5)
close(con)
#get file size
twitter_size<-object.size(twitter)
twitter_size<-capture.output(print(twitter_size,units="Mb"))
#get line count
twitter_lines<-length(twitter)
#get count words
twitter_count<-sum(stri_count_words(twitter))
#get max char line count
twitter_str_lenght<-str_length(twitter)
twitter_max<-max(twitter_str_lenght)
#get line count
twitter_lines<-length(twitter)
#get max char line count
twitter_str_lenght<-str_length(twitter)
twitter_max<-max(twitter_str_lenght)
#get count words
twitter_count<-sum(stri_count_words(twitter))
#get count words
twitter_count<-sum(stri_count_words(twitter))
#get count words
twitter_count<-sum(stri_count_words(twitter))
#get line count
twitter_lines<-length(twitter)
#get max char line count
twitter_str_lenght<-str_length(twitter)
library("stringr")
#get max char line count
twitter_str_lenght<-str_length(twitter)
twitter_max<-max(twitter_str_lenght)
#get count words
twitter_count<-sum(stri_count_words(twitter))
#get count words
twitter_count<-sum(stri_count_words(twitter))
library("stringi")
#get count words
twitter_count<-sum(stri_count_words(twitter))
rm(list=ls(pattern="_"))
twitter<-tolower(twitter)
#remove URL
pattern_html<-"http([^ ]+)"
pattern_html_1<-"http://[[:space:]]"
twitter<-gsub(pattern_html_1, "http://", twitter)
twitter_lines<-length(twitter)
blogs_lines<-length(blogs)
news_lines<-length(news)
size<-0.1 #size of the sampling
set.seed(1234)
#twitter_sample <- twitter[sample(1:twitter_lines, twitter_lines*size)]
twitter_sample<-sample(twitter,twitter_lines*size, replace=F)
rm(list=ls(pattern="twitter"))
rm(list=ls(pattern="_"))
load("~/script_vecchi_coursera/final/data_R/data_sample.rda")
load("~/script_vecchi_coursera/final/data_R/corpus.RData")
load("~/script_vecchi_coursera/final/data_R/corpus_nostop.RData")
rm("data_sample")
#Create doc term matrix
corpus_nostop_text<-DocumentTermMatrix(corpus_nostop)
corpus_text<- DocumentTermMatrix(corpus)
corpus_text_matrix<-as.matrix(corpus_text)
sort_matrix <- sort(colSums(corpus_text_matrix),decreasing=TRUE)
data_frame_matrix <- data.frame(word = names(sort_matrix),freq=sort_matrix)
head(data_frame_matrix, 20)
corpus_nostop_text_matrix<-as.matrix(corpus_nostop_text)
sort_matrix_nostop <- sort(colSums(corpus_nostop_text_matrix),decreasing=TRUE)
data_frame_matrix_nostop <- data.frame(word = names(sort_matrix_nostop),freq=sort_matrix_nostop)
head(data_frame_matrix_nostop, 20)
wordcloud(words = data_frame_matrix$word, freq = data_frame_matrix$freq, min.freq = 1000,
max.words=50, random.order=FALSE, rot.per=0.25,
colors=brewer.pal(8, "Dark2"))
wordcloud(words = data_frame_matrix$word, freq = data_frame_matrix$freq, min.freq = 500,
max.words=50, random.order=FALSE, rot.per=0.25,
colors=brewer.pal(8, "Dark2"))
BigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 2, max = 2))
tdm.bigram = TermDocumentMatrix(corpus,control = list(tokenize = BigramTokenizer))
freq = sort(rowSums(as.matrix(tdm.bigram)),decreasing = TRUE)
freq.df = data.frame(word=names(freq), freq=freq)
head(freq.df, 20)
